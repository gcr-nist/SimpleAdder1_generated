// This code has been generated by the C2W code generator.
// Do not edit manually!

package SimpleAdder;

import hla.rti.EventRetractionHandle;
import hla.rti.LogicalTime;
import hla.rti.ReceivedInteraction;

import c2w.hla.C2WInteractionRoot;
import c2w.hla.C2WLogger;
import c2w.hla.InteractionRoot;
import c2w.hla.SubscribedInteractionFilter;
import c2w.hla.SynchronizedFederate;
import java.util.Random;

import c2w.hla.*;

public class InputSource extends SynchronizedFederate {

	private SubscribedInteractionFilter _subscribedInteractionFilter = new SubscribedInteractionFilter();
	
	// constructor
	public InputSource( String federation_id, String federate_id ) throws Exception {
	
		setLookahead( 0.2 );
		createRTI();
		joinFederation( federation_id, federate_id );

		enableTimeConstrained();

		enableTimeRegulation( getLookahead() );
		enableAsynchronousDelivery();
        // interaction pub
        
        AdderInput.publish( getRTI() );
        // interaction sub
        		
		// object pub
        		// object sub
                }
        
       // constructor
	public InputSource(  String[] federationInfo ) throws Exception {

		setLookahead( 0.2 );
		createRTI();
		joinFederation( federationInfo[ 0 ], federationInfo[ 1 ] );

		String loglevel = null;
		if(federationInfo.length == 3)
			C2WLogger.init( federationInfo[ 2 ] );
		else if(federationInfo.length > 3)
			C2WLogger.init( federationInfo[ 2 ], federationInfo[ 3 ] );		
		
		if(federationInfo.length == 5)
			loglevel = federationInfo[ 4 ];

		enableTimeConstrained();
		enableTimeRegulation( getLookahead() );
		enableAsynchronousDelivery();

        // interaction pubsub

        AdderInput.publish( getRTI() );
		// object pubsub
                		// enable pubsub log
		if(federationInfo.length  > 2) {
			
			AdderInput.enablePublishLog(
				"AdderInput",
				"inputSource",
				"NORMAL",
				loglevel);
				
			
			
		}
		
	}
	
	public AdderInput create_AdderInput() {
	   AdderInput interaction = new AdderInput();
	   interaction.set_sourceFed( getFederateId() );
	   interaction.set_originFed( getFederateId() );
	   return interaction;
	}
	
	@Override
	public void receiveInteraction(
	 int interactionClass, ReceivedInteraction theInteraction, byte[] userSuppliedTag
	) {
		InteractionRoot interactionRoot = InteractionRoot.create_interaction( interactionClass, theInteraction );
		if ( interactionRoot instanceof C2WInteractionRoot ) {
			
			C2WInteractionRoot c2wInteractionRoot = (C2WInteractionRoot)interactionRoot;

	        // Filter interaction if src/origin fed requirements (if any) are not met
	        if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRoot )  ) {
	        	return;
	        } 
		}
		
		super.receiveInteraction( interactionClass, theInteraction, userSuppliedTag );			
	}

	@Override
	public void receiveInteraction(
	 int interactionClass,
	 ReceivedInteraction theInteraction,
	 byte[] userSuppliedTag,
	 LogicalTime theTime,
	 EventRetractionHandle retractionHandle
	) {
		InteractionRoot interactionRoot = InteractionRoot.create_interaction( interactionClass, theInteraction, theTime );
		if ( interactionRoot instanceof C2WInteractionRoot ) {

			C2WInteractionRoot c2wInteractionRoot = (C2WInteractionRoot)interactionRoot;

	        // Filter interaction if src/origin fed requirements (if any) are not met
	        if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRoot )  ) {
	        	return;
	        } 
		}

		super.receiveInteraction( interactionClass, theInteraction, userSuppliedTag, theTime, retractionHandle );			
	}
	
	private void execute() throws Exception {
		System.out.println("execute==>");
		double logicalTime = 0;
		InteractionRoot interaction = null;
		ObjectReflector reflector = null;

		AdvanceTimeRequest atr = new AdvanceTimeRequest(logicalTime);
		putAdvanceTimeRequest(atr);

		readyToPopulate();
		Random rand = new Random();
		// NOTE: do initialization that depends on other federates here
		readyToRun();

		startAdvanceTimeThread();

		// executes until the federate terminates
		while (true) {
			// NOTE: change the federate logical step size below
			logicalTime += 1.0;
			System.out.println("time=" + logicalTime);
			atr.requestSyncStart();

			for (int i = 0; i < 2; i++) {
				// Create a new interactionAddClass interaction

				// Populate the message using varName.set_parameterName( value ); (see hla_interaction_setValue)

				// Send the interaction with a timestamp for the given logical time
				AdderInput input = create_AdderInput();
				int randomInteger = rand.nextInt() + 10;
				input.set_value(randomInteger);
				System.out.println("send=" + randomInteger);
				input.sendInteraction(getRTI(), logicalTime);
			}
			// NOTE: send interactions beyond this line (see hla_interaction_send)
			// executes until all interactions from the previous time step are handled
			while ((interaction = getNextInteractionNoWait()) != null) {
				
			}
			 
			while ((reflector = getNextObjectReflectorNoWait()) != null) {
			    // update and retrieve the object instance
			    reflector.reflect();
			    ObjectRoot object = reflector.getObjectRoot();
			   
				
			}
			
			// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			// DO NOT MODIFY FILE BEYOND THIS LINE
			// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			AdvanceTimeRequest newATR = new AdvanceTimeRequest(logicalTime);
			putAdvanceTimeRequest(newATR);
			atr.requestSyncEnd();
			atr = newATR;
		}
	}

	
	private void handleInteractionClass(AdderInput interaction) {
	    // user implements this function
	}
	 
	
	
	public static void main(String[] args) {
		System.out.println("InputSource main");
		try {
			InputSource instance = new InputSource(args);
			instance.execute();
		} catch (Exception e) {
			System.err.println("Exception caught: " + e.getMessage());
			e.printStackTrace();
		}
	}
}
