// This code has been generated by the C2W code generator.
// Do not edit manually!

package SimpleAdder;

import hla.rti.EventRetractionHandle;
import hla.rti.LogicalTime;
import hla.rti.ReceivedInteraction;

import c2w.hla.C2WInteractionRoot;
import c2w.hla.C2WLogger;
import c2w.hla.InteractionRoot;
import c2w.hla.SubscribedInteractionFilter;
import c2w.hla.SynchronizedFederate;


import c2w.hla.*;

public class Adder extends SynchronizedFederate {

	private SubscribedInteractionFilter _subscribedInteractionFilter = new SubscribedInteractionFilter();
	int sum;
	
	// constructor
	public Adder( String federation_id, String federate_id ) throws Exception {
	
		setLookahead( 0.2 );
		createRTI();
		joinFederation( federation_id, federate_id );

		enableTimeConstrained();

		enableTimeRegulation( getLookahead() );
		enableAsynchronousDelivery();
        // interaction pub
        
        // interaction sub
        
        AdderInput.subscribe( getRTI() );
        _subscribedInteractionFilter.setFedFilters( 
			AdderInput.get_handle(), 
			SubscribedInteractionFilter.OriginFedFilter.ORIGIN_FILTER_DISABLED, 
			SubscribedInteractionFilter.SourceFedFilter.SOURCE_FILTER_DISABLED 
		);		
		// object pub
        		// object sub
                }
        
       // constructor
	public Adder(  String[] federationInfo ) throws Exception {

		setLookahead( 0.2 );
		createRTI();
		joinFederation( federationInfo[ 0 ], federationInfo[ 1 ] );

		String loglevel = null;
		if(federationInfo.length == 3)
			C2WLogger.init( federationInfo[ 2 ] );
		else if(federationInfo.length > 3)
			C2WLogger.init( federationInfo[ 2 ], federationInfo[ 3 ] );		
		
		if(federationInfo.length == 5)
			loglevel = federationInfo[ 4 ];

		enableTimeConstrained();
		enableTimeRegulation( getLookahead() );
		enableAsynchronousDelivery();

        // interaction pubsub


        AdderInput.subscribe( getRTI() );
        _subscribedInteractionFilter.setFedFilters( 
			AdderInput.get_handle(), 
			SubscribedInteractionFilter.OriginFedFilter.ORIGIN_FILTER_DISABLED, 
			SubscribedInteractionFilter.SourceFedFilter.SOURCE_FILTER_DISABLED 
		);		// object pubsub
                		// enable pubsub log
		if(federationInfo.length  > 2) {
			
			
			AdderInput.enableSubscribeLog(
				"AdderInput",
				"Adder", 
				"NORMAL", 
				loglevel);	
			
			
		}
		
	}
	

	@Override
	public void receiveInteraction(
	 int interactionClass, ReceivedInteraction theInteraction, byte[] userSuppliedTag
	) {
		InteractionRoot interactionRoot = InteractionRoot.create_interaction( interactionClass, theInteraction );
		if ( interactionRoot instanceof C2WInteractionRoot ) {
			
			C2WInteractionRoot c2wInteractionRoot = (C2WInteractionRoot)interactionRoot;

	        // Filter interaction if src/origin fed requirements (if any) are not met
	        if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRoot )  ) {
	        	return;
	        } 
		}
		
		super.receiveInteraction( interactionClass, theInteraction, userSuppliedTag );			
	}

	@Override
	public void receiveInteraction(
	 int interactionClass,
	 ReceivedInteraction theInteraction,
	 byte[] userSuppliedTag,
	 LogicalTime theTime,
	 EventRetractionHandle retractionHandle
	) {
		InteractionRoot interactionRoot = InteractionRoot.create_interaction( interactionClass, theInteraction, theTime );
		if ( interactionRoot instanceof C2WInteractionRoot ) {

			C2WInteractionRoot c2wInteractionRoot = (C2WInteractionRoot)interactionRoot;

	        // Filter interaction if src/origin fed requirements (if any) are not met
	        if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRoot )  ) {
	        	return;
	        } 
		}

		super.receiveInteraction( interactionClass, theInteraction, userSuppliedTag, theTime, retractionHandle );			
	}
	
	private void execute() throws Exception {
		System.out.println("execute==>");
		double logicalTime = 0;
		InteractionRoot interaction = null;
		ObjectReflector reflector = null;

		AdvanceTimeRequest atr = new AdvanceTimeRequest(logicalTime);
		putAdvanceTimeRequest(atr);

		readyToPopulate();
		// NOTE: do initialization that depends on other federates here
		readyToRun();

		startAdvanceTimeThread();

		// executes until the federate terminates
		while (true) {
			// NOTE: change the federate logical step size below
			logicalTime += 1.0;

			atr.requestSyncStart();

			// NOTE: send interactions beyond this line (see hla_interaction_send)
			// executes until all interactions from the previous time step are handled

			
			while ((interaction = getNextInteractionNoWait()) != null) {
				
			    if(interaction instanceof AdderInput) {
			        handleInteractionClass((AdderInput)interaction);
				}
			}
			
			
			
			// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			// DO NOT MODIFY FILE BEYOND THIS LINE
			// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			AdvanceTimeRequest newATR = new AdvanceTimeRequest(logicalTime);
			putAdvanceTimeRequest(newATR);
			atr.requestSyncEnd();
			atr = newATR;
		}
	}

	
	private void handleInteractionClass(AdderInput interaction) {
		sum += interaction.get_value();
		System.out.println("sum=" + sum);
	}
	 
	
	private void handleObjectClass(AdderInput object) {
	    // user implements this function
	}
	
	public static void main(String[] args) {
		try {
			System.out.println("Adder main");
			Adder instance = new Adder(args);
			instance.execute();
		} catch (Exception e) {
			System.err.println("Exception caught: " + e.getMessage());
			e.printStackTrace();
		}
	}
}
